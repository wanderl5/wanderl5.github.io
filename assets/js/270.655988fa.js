(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{688:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"zip结合两个列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zip结合两个列表"}},[s._v("#")]),s._v(" zip结合两个列表")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("zip()")]),s._v(" 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组")]),s._v(" "),n("li",[s._v("利用 * 号操作符，可以将元组解压为列表。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>a = [1,2,3]\n>>> b = [4,5,6]\n>>> c = [4,5,6,7,8]\n>>> zipped = zip(a,b)     # 打包为元组的列表\n[(1, 4), (2, 5), (3, 6)]\n>>> zip(a,c)              # 元素个数与最短的列表一致\n[(1, 4), (2, 5), (3, 6)]\n\n>>> zip(*zipped)          # 与 zip 相反，*zipped 可理解为解压，返回二维矩阵式\n[(1, 2, 3), (4, 5, 6)]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);